from django.test import TestCase
from rest_framework import status
from rest_framework.test import APIClient
from rest_framework.test import force_authenticate
import uuid
import random
from django.test import TestCase
from rest_framework import status
from rest_framework.test import APIClient
from . import models
from django.contrib.auth.models import User


# Create your tests here.
class TestAPIEndpointAuthorization(TestCase):
    def test_api_authorization(self):
        urls = [
            'bank_customers',
            'bank_accounts',
        ]
        client = APIClient()
        for x in urls:
            r = client.get('/bank/api/{}/'.format(x))
            self.assertEqual(r.status_code, status.HTTP_403_FORBIDDEN)


class SetupClass(TestCase):
    username = 'admin'
    pwd = ':L:3M3pFK"N$Y!Qj'

    def create_superuser(self):
        u = User.objects.create_superuser(
            username=self.username,
            password=self.pwd
        )
        u.save()

    def setUp(self):
        self.create_superuser()


# #class TestAPIFunctionality(SetupClass):
#     def test_bankaccounts_api_post(self):
#         client = APIClient()
#         client.login(username=self.username, password=self.pwd)
#
#         # Create
#         response = client.post(
#             '/bank/api/bank_accounts/',
#             data={
#             },
#             format='json'
#         )
#         self.assertEqual(response.status_code, 201)
#         #Read
#
#         #Update
#
#         #Delete
#
#         # mache eine überweisung
#
#
#         # sucht nach einem konto
#         item_id = response.json().get('to_acc')
#         response = client.get(
#             '/bank/api/bank_accounts/{}/'.format(item_id),
#             format='json'
#         )
#
#         self.assertIsNotNone(item_id)
#         self.assertEqual(response.status_code, 200)
#
#         # sucht nach nichtexistentem Konto
#         item_id = "asdasdasdf"
#         response = client.get(
#             '/bank/api/bank_accounts/{}/'.format(item_id),
#             format='json'
#         )
#
#
#         self.assertEqual(response.status_code, 404)

#
#def testtransfer(SetUpClass):
#    sende an die transfer api einen post  request mit  json  und der  information konto from, konto to, betrag
#    also check if send konto is loged in konto also das der authorisierte benutzer nur geld von seinem konto schickt


class TestAPIEndpointAuthorization(TestCase):
    def test_api_authorization(self):
        urls = [
            'bank-customers',
            'bank-accounts',
            'bank-transfers',
        ]
        client = APIClient()
        for x in urls:
            r = client.get('/bank/api/{}/'.format(x))
            self.assertEqual(r.status_code, status.HTTP_403_FORBIDDEN)


class SetupClass(TestCase):
    username = 'admin'
    pwd = ':L:3M3pFK"N$Y!Qj'

    def create_superuser(self):
        u = User.objects.create_superuser(
            username=self.username,
            password=self.pwd
        )
        u.save()

    def setUp(self):
        self.create_superuser()

class Generator:

    @staticmethod
    def random_string() -> str:
        return str(uuid.uuid4())

    @staticmethod
    def generate_user(**kwargs):
        user = User.objects.create(
            username=f"SeedCustomer{random.randint(100000, 999999)}",
            password="customer@12345678",
            first_name=kwargs.get("first_name", Generator.random_string()),
            last_name=kwargs.get("last_name", Generator.random_string()),
        )
        user.save()
        return user


    @staticmethod
    def generate_customer(**kwargs):
        customer = models.BankCustomer(
            user=kwargs.get("user", Generator.generate_user()),
            adress=Generator.random_string()
        )
        customer.save()
        return customer

    @staticmethod
    def generate_account(**kwargs):
        customer = Generator.generate_customer()
        account = models.BankAccount(

            account_owned_by=customer,
        )
        account.save()
        return account

    @staticmethod
    def generate_transfer(**kwargs):
        transfer = models.BankTransfer(
            iban_from=kwargs.get("iban", Generator.generate_account().iban),
            executionlog="generated by test",
            iban_to=kwargs.get("iban", Generator.generate_account()),
            amount=13
        )
        transfer.save()
        return transfer


    #@staticmethod
    #def generate_mandant(**kwargs):
    #    mandant = models.Mandant.objects.create(
    #        name=kwargs.get("name", Generator.random_string()),
    #        agb=kwargs.get("agb", Generator.random_string()),
    #        impressum=kwargs.get("impressum", Generator.random_string()),
    #    )
    #    mandant.save()
    #    [mandant.users.add(x) for x in kwargs.get("users", [])]
    #    mandant.save()
    #    return mandant


class TestApiClass(SetupClass):
    def test_statechangesendcommdefault(self):
        client = APIClient()
        client.login(username=self.username, password=self.pwd)



        user = Generator.generate_user()
        customer = Generator.generate_customer()
        account = Generator.generate_account()
        transfer = Generator.generate_transfer()

        ## still have to give the newly created user the authorization  group

        client = customer.user
        client.login(username=self.username, password=self.pwd)

        # testing accounts
        # List
        r = client.get('/core/api/bank-accounts/')
        self.assertEqual(r.status_code, status.HTTP_200_OK)

        # Create
        data = {
            "name": "random",
            "balance": 0.0,
            "account_owned_by": client.id
        }
        r = client.post('/core/api/bank-accounts/', data=data, format='json')
        self.assertEqual(r.status_code, status.HTTP_201_CREATED)

        data = {
            "name": "random",
            "balance": 0.0,
            "account_owned_by": client.id-1
        }
        r = client.post('/core/api/bank-accounts/', data=data, format='json')
        self.assertEqual(r.status_code, status.HTTP_403_FORBIDDEN)

        # Read
        r = client.get('/core/api/bank-accounts/{}/'.format(account.pk))
        self.assertEqual(r.status_code, status.HTTP_200_OK)

        self.assertEqual(
            r.json().get("account.pk"), {
                "iban": account.iban,
                "name": account.name,
                "balance": account.balance,
                "account_owned_by": account.account_owned_by

            })

        r = client.get('/core/api/bank-accounts/{}/'.format(Generator.generate_account().pk))
        self.assertEqual(r.status_code, status.HTTP_403_FORBIDDEN)


        # Update
        data = {
            "iban": account.iban,
            "name": account.name,
            "balance": account.balance,
            "account_owned_by": account.account_owned_by,
        }
        r = client.patch(
            '/core/api/bank-accounts/{}/'.format(account.pk),
            data=data,
            format='json'
        )
        self.assertEqual(r.status_code, status.HTTP_403_FORBIDDEN)

        data = {
            "name": account.name,
        }
        r = client.patch(
            '/core/api/bank-accounts/{}/'.format(account.pk),
            data=data,
            format='json'
        )
        self.assertEqual(r.status_code, status.HTTP_200_OK)
        #self.assertEqual(r.json().get("state_from_send_message_defaults", {}).get("Offen"), False)

        # Delete
        r = client.delete('/core/api/bank-accounts/{}/'.format(account.pk))
        self.assertEqual(r.status_code, status.HTTP_200_OK)



        # testing Customers
        # List
        r = client.get('/core/api/bank-customers/')
        self.assertEqual(r.status_code, status.HTTP_403_FORBIDDEN)
        user = Generator.generate_user()
        customer = Generator.generate_customer()
        # Create
        data = {
            "adress": "Neue-Straße",
            "user": user.id
        }
        r = client.post('/core/api/bank-customers/', data=data, format='json')
        self.assertEqual(r.status_code, status.HTTP_201_CREATED)


        # Read
        r = client.get('/core/api/bank-customers/{}/'.format(client.pk))
        self.assertEqual(r.status_code, status.HTTP_200_OK)
        r = client.get('/core/api/bank-customers/{}/'.format(customer.pk))
        self.assertEqual(r.status_code, status.HTTP_403_FORBIDDEN)
        # self.assertEqual(r.json().get("state_to"), "offen")
        self.assertEqual(
            r.json().get("customer.pk"), {
                "id": customer.pk,
                "adress": customer.adress,
                "user": customer.user,

            })

        # Update
        data = {
            "id": customer.pk,
            "adress": "Neue Adresse",
            "user": customer.user.pk,
                }
        r = client.patch(
            '/core/api/bank-customers/{}/'.format(account.pk),
            data=data,
            format='json'
        )
        self.assertEqual(r.status_code, status.HTTP_200_OK)

        data = {
            "id": account.pk,
            "adress": "Neue Adresse",
            "user": customer.user.pk,
        }
        r = client.patch(
            '/core/api/bank-customers/{}/'.format(account.pk),
            data=data,
            format='json'
        )
        self.assertEqual(r.status_code, status.HTTP_200_OK)

        # self.assertEqual(r.json().get("state_from_send_message_defaults", {}).get("Offen"), False)

        # Delete
        r = client.delete('/core/api/bank-customers/{}/'.format(account.pk))
        self.assertEqual(r.status_code, status.HTTP_204_NO_CONTENT)

        r = client.delete('/core/api/bank-customers/{}/'.format(account.pk))
        self.assertEqual(r.status_code, status.HTTP_403_FORBIDDEN)

        # testing transfers

        transfer = Generator.generate_transfer()
        # List
        r = client.get('/core/api/bank-transfers/')
        self.assertEqual(r.status_code, status.HTTP_200_OK)

        # Create
        data = {
            "name": "random",
            "balance": 0.0,
            "account_owned_by": user.id
        }
        r = client.post('/core/api/bank-transfers/', data=data, format='json')
        self.assertEqual(r.status_code, status.HTTP_201_CREATED)
        defaults_id = r.json().get('id')

        # Read
        r = client.get('/core/api/bank-transfers/{}/'.format(transfer.pk))
        self.assertEqual(r.status_code, status.HTTP_200_OK)
        # self.assertEqual(r.json().get("state_to"), "offen")
        self.assertEqual(
            r.json().get("transfers.pk"), {
                "id": transfer.id,
                "is_open": transfer.is_open,
                "is_success": transfer.is_success,
                "amount": transfer.amount,
                "iban_from": transfer.iban_from,
                "iban_to": transfer.iban_to

            })

        # Update
        data = {
            "is_open": False,
            "is_success": True,
            }
        r = client.patch(
            '/core/api/bank-transfers/{}/'.format(transfer.pk),
            data=data,
            format='json'
        )
        self.assertEqual(r.status_code, status.HTTP_200_OK)
        # self.assertEqual(r.json().get("state_from_send_message_defaults", {}).get("Offen"), False)

        # Delete
        r = client.delete('/core/api/bank-accounts/{}/'.format(transfer.pk))
        self.assertEqual(r.status_code, status.HTTP_204_NO_CONTENT)


